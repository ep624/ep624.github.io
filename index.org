#+TITLE: EP624: Statistical Programming and Reproducible Research
#+AUTHOR: Vikas Rawal
#+OPTIONS: H:4 num:2 ^:{} broken-links:mark
#+LATEX_HEADER: \usepackage{booktabs}
#+LATEX_HEADER: \usepackage{tabularx}
#+TODO: TODO REVISE | DONE
#+PROPERTY: header-args:R :session ep624 :eval never-export
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-bigblow.setup
#+HTML_HEAD: <style>#content{max-width:1200px;} </style>
#+MACRO: hlmacro (eval (org-table-insert-hline))


* Preliminaries                                                    :noexport:

* System Setup

** Operating System

+ Install any latest distribution of GNU/Linux on your computer. I use Manjaro, but feel free to install any.
  + If you have a Mac, you can continue using OSX, and install the required applications on OSX.

** Applications

*** GNU/Linux

#+begin_src sh
## This is how my computer is setup. These commands are for Arch Linux/Manjaro.
## You can install the same applications in other distributions using their package managers.
## These commands should be run one line at a time. Do not run it as a script.
## Modify to suit your requirements
sudo pacman -Ssy
sudo pacman -S emacs firefox texlive-most biber nmap openssh yay gimp phpmyadmin evince git git-lfs mpv vlc r htop neomutt isync pass mariadb postgresql aspell-en termite pass notmuch go tk afew ack keychain chromium msmtp unison python-pip python-imaging ghostscript hplip geos youtube-dl evince pandoc-citeproc
sudo pacman -R palemoon
sudo pacman -S rofi #Only if you use i3wm
sudo pacman -U https://www.archlinux.org/packages/community/x86_64/browserpass/download/
sudo pacman -S browserpass-firefox browserpass-chromium
systemctl enable sshd
yay -S dropbox
yay -S megasync
yay -S keybase-bin
yay -S skype
yay -S signal-desktop
yay -S mimio
yay -S libreoffice-extension-languagetool
install_pulse
#+end_src

*** OS-X

  The built-in Emacs on OS-X is an older version, and it would be a
  good idea to install the latest version instead.

  The best option is to install it via homebrew. I like the version
  available from railwaycat/emacsmacport tap
  (https://github.com/railwaycat/emacs-mac-port).

  First install [[https://brew.sh/][Homebrew]]. Then, from the terminal, give following commands:

  ~$ brew tap railwaycat/emacsmacport~

  ~$ brew install emacs-mac~

  Install MacTeX from http://www.tug.org/mactex/

  Install R from http://www.r-project.org

  Also install pandoc and pandoc-citeproc using homebrew:

  ~$ brew install pandoc pandoc-citeproc~

** Create your ssh keys

[[https://www.openssh.com][ssh]] or Secure Shell is a protocol for securely transferring data over networks.

Use these commands to create your ssh keys.

#+begin_src sh
# If you do not already have ssh keys, create them as below
mkdir ~/.ssh
ssh-keygen -t rsa #No need to use a password, when asked. Just press enter for all the questions (accept defaults).
#+end_src

If you have just accepted the defaults, these commands would have created two files in ~.ssh~ directory: ~~/.ssh/id_rsa~ and ~~/.ssh/id_rsa.pub~.

id_rsa is your private key which much be kept safe and is /never/ shared with anyone.

id_rsa.pub is the matching public key which is shared with any machine with which you want to have secure data transfers.

**  Emacs configuration

In your github.com account, go to settings, click on "SSH and GPG keys", and add a new ssh key. In the box that opens, in Title add your name, and the name of your machine, and in the box below, paste the contents of the public key that was created in the previous step (~~/.ssh/id_rsa.pub~).

Once that is done, following commands will configure Emacs for the requirements of this course.

#+begin_src sh

git clone git@github.com:vikasrawal/prelude-ep624.git
git clone https://github.com/vikasrawal/prelude-ep624.git # Use may use this if you do not have a github account with your public ssh key added to it.

mv .emacs.d .emacs.d.old # Renames if you already have a .emacs.d directory
mv prelude-ep624 .emacs.d
cd .emacs.d
git checkout ep624
cd
#+end_src

* Introduction
** Introduction to the course

*** Why should you use programming for statistical analysis?
+ Programming makes your results reproducible and verifiable.
+ It is easier to revise your estimations, graphs, tables etc if you write and save your programs.
+ Updating your analysis, for example when new data become available, is easy, as the same/modified programs could be run on new data to get new results.
*** Why use R?
+ R is open-source and free of cost.
  + Will always remain available.
  + Development is fast; tools for using new, cutting-edge statistical techniques become available as add-on packages.

** Introduction to shell programming

*** Introduction to *nix file system

+ *nix file system is structured as a tree with "/" as the root.
+ ~/home/yourusername~ is your $HOME. ~ is a shortcut to this directory.
  + On Mac/OS-X, $HOME is located at ~/Users/yourusername~. ~ is mapped to this directory.

*** Important Bash Commands to Learn

**** Help
  + man :: manual
**** File management
  + ls :: list files
  + mkdir :: make directory
  + cp :: copy
  + mv :: move
  + rm :: remove/delete
  + ssh, scp, rsync :: commands used for secure copy to remote locations
  + find :: find a file
  + ack :: find files containing a string
**** Navigation
  + cd :: change directory
  + pwd :: path of working directory
**** Seeing/modifying files on the commandline
  + cat, more, less, head, tail :: commands to see contents of text files
  + awk, sed :: tools to process text files line by line.
  + diff :: to compare two text files
**** Redirection
  + $>$ :: redirect output to a file (if the output file already exists, it will be replaced)
  + $>>$ :: append output to a file (if output file does not exist, it will be created)
  + $|$ :: pipe output to another command
**** Others
  + grep :: filter lines of file containing a string
  + "ip address show" :: to find your ip address
  + sort :: sort lines
  + uniq :: to find unique adjacent lines
  + wc :: count number of bytes, words and lines

* Emacs
** Introduction to Emacs

Emacs is an powerful cross-platform editor which can be used for all kinds of tasks that you do on your computer. Although Emacs is different from every other editor you are likely to have used, learning to use Emacs would be a huge asset for your computing abilities. A good way to learn Emacs, to ask, for each activity you do on your computer, can I do this using Emacs? You will be amazed at how many times the answer is: yes, and more efficiently than in your current application.

This section does not provide a detailed guide to the use of Emacs. In this guide, I will just provide a minimal set of basic commands in emacs to get you started. This is a minimal but sufficient set to be able to work. I expect that you would learn more commands as you start using emacs.

** Notations

In emacs, a buffer is equivalent to a tab in a web browser. It is
normal to have several buffers open at the same time. Each file opens
in emacs as a buffer. Buffers could also have processes like R running
in them. Emacs displays any messages for you in a separate buffer.

Most commands in emacs are given using the Control (ctrl) or the Meta
(often mapped to alt) keys. Control key is usually referred to as ~C-~
and the Meta key as ~M-~. So a command ~C-c~ means pressing Control
and c together. Command ~M-x~ means pressing Meta and x
together. Everything is case-sensitive. So ~M-X~ would mean, pressing
Meta, Shift and x together. ~C-c M-x l~ would mean pressing C-c,
release, then M-x, release, and then l.

** Basic commands

Table [[essential-emacs-commands]] gives the commands that are the most
important. This is a minimal set, commands that you should aim to
learn as soon as possible. There are many more, which you will learn
as you start using emacs.

All commands have a verbose version that can be used by pressing ~M-x~
and writing the command. For example, ~M-x find-file~ to open a file.
All major commands are also mapped to a shortcut. For example, instead
of typing ~M-x find-file~ to open a file, you can say ~C-x C-f~. I
remember shortcuts for commands that I use most frequently. For
others, I use the verbose versions. Over time, one learns more
shortcuts and starts using them instead of the verbose versions.

#+CAPTION: Essential emacs commands
#+NAME: essential-emacs-commands
#+attr_latex: :environment longtable :align p{4cm}ll :booktabs t
| Description                                                                                                 | Verbose command         | Shortcut   |
|                                                                                                             | =M-x= followed by         |            |
|-------------------------------------------------------------------------------------------------------------+-------------------------+------------|
| /*Opening files, saving and closing*/                                                                       |                         |            |
| /Open a file/                                                                                                 | =find-file=               | =C-x C-f=    |
| /Save the buffer/file/                                                                                        | =save-buffer=             | =C-x C-s=    |
| /Save as: prompts for a new filename and saves the buffer into it/                                            | =write-named-file=        | =C-x C-w=    |
| /Save all buffers and quit emacs/                                                                             | =save-buffers-kill-emacs= | =C-x C-c=    |
| /*Copy, Cut and Delete Commands*/                                                                             |                         |            |
| /Delete the rest of the current line/                                                                         | =kill-line=               | =C-k=        |
| /To select text, press this at the beginning of the region and then take the cursor to the end/               | =set-mark-command=        | =C-spacebar= |
| /Cut the selected region/                                                                                     | =kill-region=             | =C-w=        |
| /Copy the selected region/                                                                                    | =copy-region-as-kill=     | =M-w=        |
| /Paste or insert at current cursor location/                                                                  | =yank=                    | =C-y=        |
| /*Search Commands*/                                                                                           |                         |            |
| /prompts for text string and then searches from the current cursor position forwards in the buffer/           | =isearch-forward=         | =C-s=        |
| /Find-and-replace: replaces one string with another, one by one, asking for each occurrence of search string/ | =query-replace=           | =M-%=        |
| /Find-and-replace: replaces all occurrences of one string with another/                                       | =replace-string=          |            |
| /*Other commands*/                                                                                            |                         |            |
| Divide a long sentence into multiple lines, each smaller than the maximum width specified                   | =fill-paragraph=          | =M-q=        |
| /*Window and Buffer Commands*/                                                                                |                         |            |
| /Switch to another buffer/                                                                                    | =switch-to-buffer=        | =C-x b=      |
| /List all buffers/                                                                                            | =list-buffers=            | =C-x C-b=    |
| /Split current window into two windows; each window can show same or different buffers/                       | =double-window=           | =C-x 2=      |
| /Remove the split/                                                                                            | =zero-window=             | =C-x 0=      |
| /When you have two or more windows, move the cursor to the next window/                                       | =other-window=            | =C-x o=      |
| /*Canceling and undoing*/                                                                                     |                         |            |
| /Abort the command in progress/                                                                               | =keyboard-quit=           | =C-g=        |
| /Undo/                                                                                                        | =undo=                    | =C-_=        |

** Resources
+ [[https://www2.lib.uchicago.edu/keith/tcl-course/emacs-tutorial.html][A Tutorial Introduction to GNU Emacs]]
+ A. J Rossini and Richard M Heiberger and Rodney A Sparapani and Martin Mächler and Kurt Hornik (2004), “Emacs Speaks Statistics: A Multiplatform, Multipackage Development Environment for Statistical Analysis”, Journal of Computational and Graphical Statistics, 13(1), 247-261
+ Heiberger, Richard M (2001), “Emacs Speaks Statistcs: One Interface, Many Programs”, in K. Hornik and F. Leisch (eds.), Proceedings of the 2nd International Workshop on Distributed Statistical Computing, March 15-17, Vienna, Austria
+ Rossini, A.J., Heiberger, R.M., Hornik, K., Maechler, M., Sparapani, R.A., Eglen, S.J., Spinu, V., Henry, L. (2016), ESS: Emacs Speaks Statistics
+ Rossini, Anthony, Martin Maechler, Kurt Hornik, Richard M. Heiberger, (2001) "Emacs Speaks Statistics: A Universal Interface for Statistical Analysis", University of Washington Biostatistics Available at: http://works.bepress.com/anthony_rossini/3/

* R Programming
** Basics

+ R is a case sensitive language. Do not mix upper case and lower case characters.
+ You should have a separate directory for each project/article you work on.
+ By default, the work you do is saved in this working directory in a file called .RData
+ All R commands are followed by ~()~. Arguments that the command needs are given inside the parentheses. Empty parentheses have to be used even if a command needs no arguments. For example,
  + ~q~ will not work as a command
  + ~q()~ is a command
  + ~q(save="yes")~ is a command with an argument that asks the R environment to be saved before quitting.
+ ~->~ or ~<-~ is used to create an object using output of a command.
  + ~c(1:5)->col1~ creates an object col1 containing the output of the command ~c(1:5)~.
  + ~col1<-c(1:5)~ also does the same thing.
+ In this guide, all commands are formatted using a mono-spaced font to distinguish them. Such lines are numbered. But line numbers are not a part of the command. In the boxes, text starting with a ~#~ is used to write comments for the reader. These comments are not part of the commands. You do not need to type them into R as any line starting with a ~#~ is treated as a comment in R and not executed. When you write your own programs, use lines starting with ~#~ to write your own comments that may be necessary to make your program intelligible to your collaborators.

#+begin_src R -n
#+CAPTION: Some basic commands in R
# Text after # is a comment to explain what the command does
q() # Quit R; prompts for saving the workspace.
?command # Open help for 'command'; q to quit help.
??keyword # List commands with 'keyword' in the title
help.search("keyword") # List commands with 'keyword'
                       #  anywhere in the docs
setwd("c:/project1")  # On a Windows machine, sets the working directory to c:/project1
setwd("~/proj2")  # On a Linux or OSX machine, sets the working directory to ~/proj2
getwd() # Reports the present working directory
#+end_src


** Data structures in R
#+INCLUDE: "~/ssercloud/sseRguide/sseRguide.org::#dataobjects" :only-contents t

** Statistical Graphics with ggplot2

#+INCLUDE: "~/ssercloud/sseRguide/sseRguide.org::#ggplotgraphs" :only-contents t

** Making tables using the data.table package
#+INCLUDE: "~/ssercloud/sseRguide/sseRguide.org::#datatables" :only-contents t

** Analysis of Survey Data in R
** Econometric Analysis in R

** Resources
+ Chang, Winston (2013), /R Graphics Cookbook/, OReilly
+ Crawley, Michael J (2015), /Statistics: An Introduction using R/, Wiley
+ Fox, John and Weisberg, Sanford (2011), /An R Companion to Applied Regression/, Sage Publications, Thousand Oaks, CA.
+ Hatekar, Neeraj (2010), /Principles of Econometrics: An Introduction (Using R)/, Sage
+ Hilbe, Joseph (2013), /Methods of Statistical Model Estimation/, Chapman & Hall/CRC Press.
+ Lumley, Thomas, /Complex Surveys: A Guide to Analysis Using R/, John Wiley & Sons
+ Maindonald, John and Braun, John (2003), /Data Analysis and Graphics Using R: An Example-based Approach/, Cambridge University Press
+ Michael J. Crawley (2013), /The R Book/, Second Edition, John Wiley & Sons
+ Murrell, Paul (2011), /R Graphics/, Chapman & Hall/CRC Press.
+ R Core Team (2015), /An Introduction to R/,  R Foundation for Statistical Computing,Vienna.
+ R Core Team (2015), /R: A Language and Environment for Statistical Computing/,  R Foundation for Statistical Computing,Vienna.
+ Spector, Phil (2008), /Data Manipulation with R/, Springer
+ Wikham, Hadley, /ggplot2: Elegant Graphics for Data Analysis/, UseR Series, Springer

* Reproducible Research
** Introduction to orgmode
#+INCLUDE: "~/vikascloud/orgpaper/orgpapers.org::#orgmodebasics"

#+INCLUDE: "~/vikascloud/orgpaper/orgpapers.org::#orgmodeandr"

** Formatting tables and figures for print
** Citation management using org-ref and biblatex
+ A sample biblatex database to get you started can be taken from [[https://raw.githubusercontent.com/indianstatistics/bibliobase/master/bibliobase.bib][here]]. For now, you may just download it, save it and add to it. Please note that the source file on github keeps getting updated. Eventually, you may want to manage your own biblatex database using something like git.
+ There is also another Emacs mode -- ebib -- that can be used for maintaining your biblatex database. To start ebib, use M-x ebib
** Resources
+ Dominik, Carsten and others (2016), /The Org Manual/, Free Software Foundation
+ Gentleman, Robert and Duncan Temple Lang, “Statistical Analyses and Reproducible Research”, Journal of Computational and Graphical Statistics, 16 (1), pp. 1-23
+ Kitchin, John (2014), The org-ref Manual
+ Knuth, Donald E. (1992), /Literate Programming/, Center for the Study of Language and Information, Stanford.
+ Rawal, Vikas (2014), /Using Emacs, Org-mode and R for Research Writing in Social Sciences: A Toolkit for Writing Reproducible Research Papers and Monographs/,  http://archive.indianstatistics.org/tools/orgpapers.pdf; a revised but incomplete version may be seen at https://github.com/vikasrawal/orgpaper/blob/master/orgpapers.org
+ Rossini, Anthony and Friedrich Leisch. (2003) "Literate Statistical Practice", University of Washington Biostatistics Working Paper Series , Available at: http://works.bepress.com/anthony_rossini/6/
+ Schulte, Eric and Dan Davison (2011), “Active Documents with Org-Mode”, Computing in Science & Engineering.
+ Schulte, Eric, Dan Davison, Thomas Dye and Carsten Dominik (2016), "A Multi-Language Computing Environment for Literate Programming and Reproducible Research." Journal of Statistical Software, 46 (3), 1 – 24.
* Git

Git is a version control system. Created originally by Linus Torvaldes, it is most widely used version control system for collaboration and tracking by software developers. Since most of our work -- the org files, the R scripts, the LaTeX files -- is in plain text files, we can use git not only to track evolution of our programs but also of our research papers, dissertations and books.

Apart from locally hosting your repositories on your own machine, you can also keep your repositories on platforms like github and gitlab. If you want to keep your work-in-progress research on these platforms, you would need rights to create private repositories. While gitlab provides it by default, you can enable it on github by claiming educational discount.

I will be using git and github to run this course. Which means that you will need to know basic git commands to submit your assignments and get my feedback. The idea is to use this to familiarise you with basic git commands.

I will create a separate /repository/ for each student on github, and invite you as a collaborator. You will /clone/ it on your computer using the commands mentioned below, create a separate sub-directory for each assignment and do all your work in these sub-directories. Once you have completed some work and want to share it with me, you will /commit/ it and /push/ it to the github repository. You commit anything to the repository in two steps. You first add it to the /staging area/ and then you /commit/ it.

#+begin_src sh -n
#+CAPTION: Basic git workflow for this course

  ## The following command, after modifying the name of your repository,
  ## clones your repository. A directory -- 2020_yourname -- will be
  ## created in the directory from where the command is given
  ## (your home directory in this case). All future work for the course
  ## should be done in 2020_yourname directory.

  cd ~
  git clone git@github.com:ep624/2020_yourname.git

  ## create a separate subdirectory in 2020_yourname for each of your assignments.
  cd ~/2020_yourname
  mkdir midterm

  ## To add a file to the staging area (a new file, or a file that has been modified)
  git add mainfile.org
  git add figure1.png ## the repository accepts png files as git lfs objects.

  ## To commit the file
  git commit -m "A message describing this commit"

  ## To push it to github repository
  git push

  ## To pull from github the work of other collaborators (my comments/edits, for example)
  ## and merge it into your local repository
  git pull

#+end_src

* References                                                       :noexport:

bibliography:~/ssercloud/bibliobase/bibliobase.bib
